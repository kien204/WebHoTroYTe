import React, { useState, useContext, useEffect } from "react";
import { Button } from "primereact/button";
import { InputText } from "primereact/inputtext";
import { Card } from "primereact/card";
import { Avatar } from "primereact/avatar";
import { Divider } from "primereact/divider";
import { ScrollPanel } from "primereact/scrollpanel";

import chatAI from "../../assets/chatAI.png";
import ReactMarkdown from "react-markdown";
import remarkGfm from "remark-gfm";
import { AuthContext } from "../../common/context/AuthContext";
import { useApi } from "../../common/hooks/useApi";
import { useToast } from "../../common/hooks/useToast";
import aiHelperAPI from "../../services/api/aiHelperAPI";

const AIHelper = () => {
  const { auth, info } = useContext(AuthContext);
  const { showToast } = useToast();
  const { callApi } = useApi(showToast, false);

  const [loadingMes, setLoadingMes] = useState(false);
  const [date, setDate] = useState(null);
  const [history, setHistory] = useState([]);

  const [messages, setMessages] = useState([
    {
      id: null,
      question: null,
      answer:
        "Xin ch√†o! T√¥i l√† tr·ª£ l√Ω Al s·ª©c kh·ªèe c·ªßa b·∫°n. T√¥i c√≥ th·ªÉ gi√∫p b·∫°n hi·ªÉu v·ªÅ c√°c ch·ªâ s·ªë s·ª©c kh·ªèe, ƒë∆∞a ra l·ªùi khuy√™n v·ªÅ ch·∫ø ƒë·ªô ƒÉn u√¥ng, t·∫≠p luy·ªán v√† gi·∫£i th√≠ch c√°c c·∫£nh b√°o. B·∫°n mu√¥n h·ªèi g√¨ h√¥m nay?",
      date: null,
    },
  ]);
  const [input, setInput] = useState("");

  useEffect(() => {
    let isMounted = true; 

    const fetchHistory = async () => {
      try {
        const res = await callApi(() => aiHelperAPI.getHistory(auth.id));
        if (isMounted) setHistory(res.data.reverse()); 
      } catch {
        //
      }
    };

    fetchHistory();

    return () => {
      isMounted = false; 
    };
  }, [auth.id, callApi]);

  const handleSend = async () => {
    if (!input.trim()) return;
    setLoadingMes(true);
    setMessages((prev) => [
      ...prev,
      {
        id: null,
        question: input,
        answer: null,
        date: null,
      },
    ]);

    setTimeout(() => {
      setMessages((prev) => [
        ...prev,
        {
          id: -1,
          question: null,
          answer: "Chatbot ƒëang tr·∫£ l·ªùi...",
          date: null,
        },
      ]);
    }, 500);

    const reData = {
      tkID: auth.id,
      question: input,
      time: date,
    };

    setInput("");
    console.log(reData);

    try {
      const res = await callApi(() => aiHelperAPI.sendChat(reData));
      setMessages((prev) =>
        prev.map((msg) =>
          msg.id === -1
            ? { ...msg, id: null, answer: res.answer } // c·∫≠p nh·∫≠t n·ªôi dung th·∫≠t
            : msg
        )
      );
    } catch {
      setMessages((prev) =>
        prev.map((msg) =>
          msg.id === -1
            ? {
                ...msg,
                id: null,
                answer: "Xin l·ªói, c√≥ l·ªói x·∫£y ra. Vui l√≤ng th·ª≠ l·∫°i.",
              }
            : msg
        )
      );
    } finally {
      setLoadingMes(false);
    }
  };

  const handleSelect = (item) => {
    // item l√† 1 nh√≥m tin nh·∫Øn
    setMessages(item);
    setDate(item[0].date);
  };

  const handleNewChat = () => {
    setInput("");
    setDate(null);
    setMessages([
      {
        id: null,
        question: null,
        answer:
          "Xin ch√†o! T√¥i l√† tr·ª£ l√Ω AI s·ª©c kh·ªèe c·ªßa b·∫°n. T√¥i c√≥ th·ªÉ gi√∫p b·∫°n hi·ªÉu v·ªÅ c√°c ch·ªâ s·ªë s·ª©c kh·ªèe, ƒë∆∞a ra l·ªùi khuy√™n v·ªÅ ch·∫ø ƒë·ªô ƒÉn u·ªëng, t·∫≠p luy·ªán v√† gi·∫£i th√≠ch c√°c c·∫£nh b√°o. B·∫°n mu·ªën h·ªèi g√¨ h√¥m nay?",
        date: null,
      },
    ]);
  };

  return (
    <div className="flex flex-column">
      <div>
        <div className="font-bold text-2xl">Tr·ª£ l√Ω AI s·ª©c kh·ªèe</div>
        <div className="text-main2 mb-3">
          T∆∞ v·∫•n s·ª©c kh·ªèe th√¥ng minh d·ª±a tr√™n d·ªØ li·ªáu c√° nh√¢n c·ªßa b·∫°n
        </div>
      </div>

      <div className="flex flex-column lg:flex-row ">
        <div className="col-12 lg:col-3">
          <Card
            title={
              <div className="flex flex-row align-items-center">
                <div className="text-xl">L·ªãch s·ª≠ tr√≤ chuy·ªán</div>
                <Button
                  icon="pi pi-plus"
                  className="ml-auto p-2 align-self-center"
                  size="small"
                  onClick={handleNewChat}
                />
              </div>
            }
            className="h-full"
          >
            <div className="flex flex-column gap-3">
              {history.map((item, i) => (
                <div
                  key={i}
                  className="flex justify-content-between align-items-center border-1 border-round p-2 hover:surface-100 cursor-pointer"
                  style={{ borderColor: "#e0e0e0" }}
                  onClick={() => handleSelect(item)}
                >
                  <div className="flex flex-column w-full pr-2">
                    <div
                      className="font-medium text-sm line-clamp"
                      style={{
                        display: "-webkit-box",
                        WebkitBoxOrient: "vertical",
                        WebkitLineClamp: 2,
                        overflow: "hidden",
                        textOverflow: "ellipsis",
                        whiteSpace: "normal",
                      }}
                    >
                      {item[0].question}
                    </div>
                    <small className="text-xs text-500">{item[0].date}</small>
                  </div>
                  <Button
                    icon="pi pi-trash"
                    className="p-button-text p-button-danger"
                    // onClick={(e) => {
                    //   e.stopPropagation(); // üëà tr√°nh b·ªã click c·∫£ item
                    //   handleDelete(item);
                    // }}
                  />
                </div>
              ))}
            </div>
          </Card>
        </div>

        {/* Khu v·ª±c Chat */}
        <div className="col-12 lg:col-9">
          <Card
            title={
              <div className="flex flex-row">
                <div>Tr·ª£ l√Ω AI xin ch√†o</div>
                <div className="hidden">
                  <div className="font-normal text-xs card-4 ml-3 px-2 flex align-items-center">
                    Tr·ª±c tuy·∫øn
                  </div>
                  <div
                    className="ml-auto text-xs font-normal flex align-items-center hidden"
                    style={{ color: "#0083AD" }}
                  >
                    Ph·∫£n h·ªìi trong v√†i gi√¢y
                  </div>
                </div>
              </div>
            }
          >
            <ScrollPanel style={{ height: "350px" }} className="mb-3">
              <div className="flex flex-column gap-3 w-full">
                {messages.map((msg, i) => (
                  <div key={i} className="flex flex-column">
                    {/* Tin nh·∫Øn c·ªßa ng∆∞·ªùi d√πng (ph·∫£i) */}
                    {msg.question && (
                      <div className="flex justify-content-end align-items-start gap-2">
                        <span
                          className="p-2 border-round-3xl shadow-1"
                          style={{
                            background: "#F1F1F1",
                            maxWidth: "70%",
                            wordBreak: "break-word",
                            whiteSpace: "pre-wrap",
                          }}
                        >
                          {msg.question}
                        </span>
                        <Avatar
                          image={
                            info?.avatarUrl ||
                            "https://www.w3schools.com/howto/img_avatar.png"
                          }
                          shape="circle"
                          style={{
                            width: "40px",
                            height: "40px",
                            objectFit: "cover",
                          }}
                        />
                      </div>
                    )}

                    {/* Tin nh·∫Øn c·ªßa chatbot (tr√°i) */}
                    {msg.answer && (
                      <div className="flex justify-content-start align-items-start gap-2 mt-2">
                        <Avatar
                          image={chatAI}
                          shape="circle"
                          style={{
                            width: "40px",
                            height: "40px",
                            objectFit: "cover",
                          }}
                        />
                        <span
                          className="p-2 border-round-3xl shadow-1"
                          style={{
                            background: "#F1F1F1",
                            maxWidth: "70%",
                            wordBreak: "break-word",
                            whiteSpace: "pre-wrap",
                          }}
                        >
                          <ReactMarkdown remarkPlugins={[remarkGfm]}>
                            {msg.answer}
                          </ReactMarkdown>
                        </span>
                      </div>
                    )}
                  </div>
                ))}
              </div>
            </ScrollPanel>

            <div className="flex align-items-center gap-2">
              <InputText
                value={input}
                onChange={(e) => setInput(e.target.value)}
                placeholder="H·ªèi v·ªÅ s·ª©c kh·ªèe c·ªßa b·∫°n..."
                className="w-full"
                onKeyDown={(e) => {
                  if (e.key === "Enter") handleSend();
                }}
              />
              <Button
                icon="pi pi-send"
                onClick={handleSend}
                disabled={loadingMes}
              />
            </div>
          </Card>
        </div>
      </div>
      {/* FAQ */}
      <Divider />
      <div className="flex flex-column lg:flex-row">
        <div className="col-12 lg:col-4">
          <Card>
            <div className="flex align-items-center gap-2">
              <i className="pi pi-heart text-primary"></i>
              <span>Huy·∫øt √°p 135/80 c√≥ cao kh√¥ng?</span>
            </div>
          </Card>
        </div>
        <div className="col-12 lg:col-4">
          <Card>
            <div className="flex align-items-center gap-2">
              <i className="pi pi-apple text-primary"></i>
              <span>N√™n ƒÉn g√¨ ƒë·ªÉ gi·∫£m cholesterol?</span>
            </div>
          </Card>
        </div>
        <div className="col-12 lg:col-4">
          <Card>
            <div className="flex align-items-center gap-2">
              <i className="pi pi-calendar text-primary"></i>
              <span>N√™n th·ªÉ d·ª•c bao l√¢u m·ªói tu·∫ßn?</span>
            </div>
          </Card>
        </div>
      </div>
    </div>
  );
};

export default AIHelper;
